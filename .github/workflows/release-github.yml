name: Create GitHub Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  create-release-version:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.check-tag.outputs.web }}
      demo: ${{ steps.check-tag.outputs.demo }}
      ios: ${{ steps.check-tag.outputs.ios }}
      android: ${{ steps.check-tag.outputs.android }}
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Check tag for deployment targets
        id: check-tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Processing tag: $TAG"

          # Extract version number
          VERSION=$(echo $TAG | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check for deployment targets
          if [[ $TAG == *"web"* ]]; then
            echo "web=true" >> $GITHUB_OUTPUT
          else
            echo "web=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"demo"* ]]; then
            echo "demo=true" >> $GITHUB_OUTPUT
          else
            echo "demo=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"ios"* ]]; then
            echo "ios=true" >> $GITHUB_OUTPUT
          else
            echo "ios=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"android"* ]]; then
            echo "android=true" >> $GITHUB_OUTPUT
          else
            echo "android=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Get commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits between previous tag and current tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREV_TAG..HEAD)
          fi

          # Create deployment section based on tag
          DEPLOYMENTS=""
          if [[ "${{ steps.check-tag.outputs.web }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Web (https://web.djibon.com)"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Web"
          fi

          if [[ "${{ steps.check-tag.outputs.demo }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Demo (https://demo.djibon.com)"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Demo"
          fi

          if [[ "${{ steps.check-tag.outputs.ios }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] iOS"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] iOS"
          fi

          if [[ "${{ steps.check-tag.outputs.android }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Android"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Android"
          fi

          # Create release notes with commit list and deployment info
          NOTES="## Version ${{ steps.check-tag.outputs.version }}\n\n## What's New\n\n$COMMITS\n\n## Deployment Targets$DEPLOYMENTS\n\n## Download Links\n\n- Web App: https://web.djibon.com\n- Download Page: https://download.djibon.com"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # We'll create the release in the final job after all builds are complete

  update-version:
    needs: create-release-version
    uses: ./.github/workflows/update-version.yml
    with:
      version: ${{ needs.create-release-version.outputs.version }}

  build-web:
    needs: [create-release-version, update-version]
    if: needs.create-release-version.outputs.web == 'true' || needs.create-release-version.outputs.demo == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v3
        with:
          name: version-files
          path: ./

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        run: cargo install -f wasm-bindgen-cli --locked

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli@0.6.0 --locked

      - name: Build Dioxus app
        run: dx build --release

      - name: Upload web build artifact
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: target/dx/djibon/release/web/public
          retention-days: 30

      - name: Deploy to web.djibon.com
        if: needs.create-release-version.outputs.web == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy target/dx/djibon/release/web/public --project-name=djibon-web

      - name: Deploy to demo.djibon.com
        if: needs.create-release-version.outputs.demo == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy target/dx/djibon/release/web/public --project-name=djibon-demo

  # Note: iOS builds are now also handled by the ios-build.yml workflow
  # This job is kept for backward compatibility
  build-ios:
    needs: [create-release-version, update-version]
    if: needs.create-release-version.outputs.ios == 'true'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v3
        with:
          name: version-files
          path: ./

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios, x86_64-apple-ios, aarch64-apple-ios-sim

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Build iOS App
        run: dx build --platform ios --release

      - name: Prepare iOS App Bundle
        run: |
          # Find the iOS app bundle
          IOS_APP_PATH=$(find target/dx/djibon/release/ios -name "*.app" -type d | head -1)

          if [ -z "$IOS_APP_PATH" ]; then
            echo "iOS app bundle not found"
            exit 1
          fi

          # Create a zip file of the app
          cd $(dirname "$IOS_APP_PATH")
          APP_NAME=$(basename "$IOS_APP_PATH" .app)
          zip -r "$APP_NAME.zip" "$(basename "$IOS_APP_PATH")"

          # Copy to download-page
          mkdir -p $GITHUB_WORKSPACE/download-page
          cp "$APP_NAME.zip" $GITHUB_WORKSPACE/download-page/djibon-ios.zip

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: ${{ github.workspace }}/download-page/djibon-ios.zip
          retention-days: 30

      # We'll upload to GitHub Release in the final job

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          workingDirectory: 'download-page'
          command: pages deploy . --project-name=djibon-download

  build-android:
    needs: [create-release-version, update-version]
    if: needs.create-release-version.outputs.android == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v3
        with:
          name: version-files
          path: ./

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-linux-androideabi, aarch64-linux-android

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli@0.6.0 --locked

      - name: Build Android App
        run: dx build --platform android --release

      - name: Find and prepare APK
        run: |
          APK_PATH=$(find target/dx/djibon/release/android -name "*.apk" | grep -v "intermediates" | head -1)

          if [ -z "$APK_PATH" ]; then
            echo "APK not found"
            exit 1
          fi

          # Copy to download-page
          mkdir -p download-page
          cp "$APK_PATH" download-page/djibon-app.apk

      - name: Upload Android build artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-build
          path: download-page/djibon-app.apk
          retention-days: 30

      # We'll upload to GitHub Release in the final job

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          workingDirectory: 'download-page'
          command: pages deploy . --project-name=djibon-download

  release-to-github:
    needs: [create-release-version, build-web, build-ios, build-android]
    if: always() && needs.create-release-version.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for release notes generation

      - name: Download web artifact
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: artifacts/web

      - name: Download iOS artifact
        uses: actions/download-artifact@v3
        with:
          name: ios-build
          path: artifacts/ios

      - name: Download Android artifact
        uses: actions/download-artifact@v3
        with:
          name: android-build
          path: artifacts/android

      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts

          # Create a zip of the web build
          cd artifacts/web
          zip -r ../../release-artifacts/djibon-web-${{ needs.create-release-version.outputs.version }}.zip .
          cd ../..

          # Copy iOS and Android artifacts
          if [ -f artifacts/ios/djibon-ios.zip ]; then
            cp artifacts/ios/djibon-ios.zip release-artifacts/djibon-ios-${{ needs.create-release-version.outputs.version }}.zip
          fi

          if [ -f artifacts/android/djibon-app.apk ]; then
            cp artifacts/android/djibon-app.apk release-artifacts/djibon-android-${{ needs.create-release-version.outputs.version }}.apk
          fi

          # List all artifacts
          echo "Prepared artifacts for release:"
          ls -la release-artifacts/

      - name: Generate release status
        id: release-status
        run: |
          STATUS="## Build Status\n\n"

          if [[ "${{ needs.build-web.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ✅ Web: Successfully deployed"
          elif [[ "${{ needs.build-web.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ⏭️ Web: Skipped"
          else
            STATUS="$STATUS\n- ❌ Web: Failed"
          fi

          if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ✅ iOS: Successfully built"
          elif [[ "${{ needs.build-ios.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ⏭️ iOS: Skipped"
          else
            STATUS="$STATUS\n- ❌ iOS: Failed"
          fi

          if [[ "${{ needs.build-android.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ✅ Android: Successfully built"
          elif [[ "${{ needs.build-android.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ⏭️ Android: Skipped"
          else
            STATUS="$STATUS\n- ❌ Android: Failed"
          fi

          echo "RELEASE_STATUS<<EOF" >> $GITHUB_ENV
          echo -e "$STATUS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ needs.create-release-version.outputs.version }}
          body: |
            ${{ env.RELEASE_NOTES }}

            ${{ env.RELEASE_STATUS }}

            ## Download Links

            - Web App: https://web.djibon.com
            - Download Page: https://download.djibon.com
          files: release-artifacts/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
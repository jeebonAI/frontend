name: Create GitHub Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  create-release-version:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.check-tag.outputs.web }}
      demo: ${{ steps.check-tag.outputs.demo }}
      ios: ${{ steps.check-tag.outputs.ios }}
      android: ${{ steps.check-tag.outputs.android }}
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for release notes

      - name: Check tag for deployment targets
        id: check-tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Processing tag: $TAG"

          # Save tag for other workflows
          echo "$TAG" > tag-info.txt

          # Extract version number
          VERSION=$(echo $TAG | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Check for deployment targets
      - name: Check for deployment targets
        id: check-deployments
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == *"web"* ]]; then
            echo "web=true" >> $GITHUB_OUTPUT
          else
            echo "web=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"demo"* ]]; then
            echo "demo=true" >> $GITHUB_OUTPUT
          else
            echo "demo=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"ios"* ]]; then
            echo "ios=true" >> $GITHUB_OUTPUT
          else
            echo "ios=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"android"* ]]; then
            echo "android=true" >> $GITHUB_OUTPUT
          else
            echo "android=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload tag information
        uses: actions/upload-artifact@v4
        with:
          name: tag-info
          path: tag-info.txt
          retention-days: 1

      - name: Generate Release Notes
        id: release-notes
        run: |
          # Get commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits between previous tag and current tag
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREV_TAG..HEAD)
          fi

          # Categorize commits (basic categorization)
          FEATURES=$(echo "$COMMITS" | grep -i -E '(feat|feature|add|new):' || echo "")
          FIXES=$(echo "$COMMITS" | grep -i -E '(fix|bug|issue|resolve):' || echo "")
          IMPROVEMENTS=$(echo "$COMMITS" | grep -i -E '(improve|enhance|update|refactor|perf):' || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i -E '(feat|feature|add|new|fix|bug|issue|resolve|improve|enhance|update|refactor|perf):' || echo "")

          # Create deployment section based on tag
          DEPLOYMENTS=""
          if [[ "${{ steps.check-tag.outputs.web }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Web (https://web.djibon.com)"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Web"
          fi

          if [[ "${{ steps.check-tag.outputs.demo }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Demo (https://demo.djibon.com)"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Demo"
          fi

          if [[ "${{ steps.check-tag.outputs.ios }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] iOS"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] iOS"
          fi

          if [[ "${{ steps.check-tag.outputs.android }}" == "true" ]]; then
            DEPLOYMENTS="$DEPLOYMENTS\n- [x] Android"
          else
            DEPLOYMENTS="$DEPLOYMENTS\n- [ ] Android"
          fi

          # Create structured release notes
          NOTES="## Version ${{ steps.check-tag.outputs.version }}\n\n"
          
          # Add features section if there are any
          if [ ! -z "$FEATURES" ]; then
            NOTES="$NOTES### ‚ú® New Features\n\n$FEATURES\n\n"
          fi
          
          # Add fixes section if there are any
          if [ ! -z "$FIXES" ]; then
            NOTES="$NOTES### üêõ Bug Fixes\n\n$FIXES\n\n"
          fi
          
          # Add improvements section if there are any
          if [ ! -z "$IMPROVEMENTS" ]; then
            NOTES="$NOTES### üöÄ Improvements\n\n$IMPROVEMENTS\n\n"
          fi
          
          # Add other changes section if there are any
          if [ ! -z "$OTHER" ]; then
            NOTES="$NOTES### üîÑ Other Changes\n\n$OTHER\n\n"
          fi
          
          # Add deployment targets section
          NOTES="$NOTES## Deployment Targets$DEPLOYMENTS\n\n"
          
          # Add download links
          NOTES="$NOTES## Download Links\n\n- Web App: https://web.djibon.com\n- Download Page: https://download.djibon.com"
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # We'll create the release in the final job after all builds are complete

  update-version:
    needs: create-release-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update version in Dioxus.toml and Cargo.toml
        run: |
          VERSION=${{ needs.create-release-version.outputs.version }}
          # Update only the package version in Cargo.toml
          sed -i "/^\[package\]/,/^\[/ s/^version = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/version = \"$VERSION\"/" Cargo.toml
          # Update version_name in Dioxus.toml
          sed -i "s/version_name = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/version_name = \"$VERSION\"/g" Dioxus.toml

          echo "Updated version to $VERSION in Cargo.toml and Dioxus.toml"

      - name: Upload updated files
        uses: actions/upload-artifact@v4
        with:
          name: version-files
          path: |
            Cargo.toml
            Dioxus.toml
          retention-days: 1

  build-web:
    needs: [update-version]
    if: ${{ contains(github.ref, 'web') || contains(github.ref, 'demo') }}
    runs-on: ubuntu-latest
    # Always run the build job to create artifacts, but deployments will be conditional

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      # Use the custom Dioxus action instead of manual Rust setup
      - name: Build Dioxus
        uses: wizardsupreme/dioxus-action@v0
        with:
          repo: 'wizardsupreme/dioxus'
          version: 'main'

      - name: Upload web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: target/dx/djibon/release/web/public
          retention-days: 30

      - name: Check tag for deployment targets
        id: check-tags
        if: github.event_name == 'push'
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == *"web"* ]]; then
            echo "deploy_web=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_web=false" >> $GITHUB_OUTPUT
          fi

          if [[ $TAG == *"demo"* ]]; then
            echo "deploy_demo=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_demo=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to web.djibon.com
        if: steps.check-tags.outputs.deploy_web == 'true'
        uses: cloudflare/wrangler-action@v4.13.2
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy target/dx/djibon/release/web/public --project-name=djibon-web

      - name: Deploy to demo.djibon.com
        if: steps.check-tags.outputs.deploy_demo == 'true'
        uses: cloudflare/wrangler-action@v4.13.2
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: pages deploy target/dx/djibon/release/web/public --project-name=djibon-demo

  build-ios:
    needs: [update-version]
    if: ${{ contains(github.ref, 'ios') }}
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios, x86_64-apple-ios, aarch64-apple-ios-sim

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Build iOS App
        run: dx build --platform ios --release

      - name: Prepare iOS App Bundle
        run: |
          # Find the iOS app bundle
          IOS_APP_PATH=$(find target/dx/djibon/release/ios -name "*.app" -type d | head -1)

          if [ -z "$IOS_APP_PATH" ]; then
            echo "iOS app bundle not found"
            exit 1
          fi

          # Create a zip file of the app
          cd $(dirname "$IOS_APP_PATH")
          APP_NAME=$(basename "$IOS_APP_PATH" .app)
          zip -r "$APP_NAME.zip" "$(basename "$IOS_APP_PATH")"

          # Copy to download-page
          mkdir -p $GITHUB_WORKSPACE/download-page
          cp "$APP_NAME.zip" $GITHUB_WORKSPACE/download-page/djibon-ios.zip

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ${{ github.workspace }}/download-page/djibon-ios.zip
          retention-days: 30

  build-android:
    needs: [update-version]
    if: ${{ contains(github.ref, 'android') }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download version files
        uses: actions/download-artifact@v4
        with:
          name: version-files
          path: ./

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-linux-androideabi, aarch64-linux-android

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Build Android App
        run: dx build --platform android --release

      - name: Find and prepare APK
        run: |
          APK_PATH=$(find target/dx/djibon/release/android -name "*.apk" | grep -v "intermediates" | head -1)

          if [ -z "$APK_PATH" ]; then
            echo "APK not found"
            exit 1
          fi

          # Copy to download-page
          mkdir -p download-page
          cp "$APK_PATH" download-page/djibon-app.apk

      - name: Upload Android build artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: download-page/djibon-app.apk
          retention-days: 30

  release-to-github:
    needs: [build-web, build-ios, build-android]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Add explicit permission to create releases

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for release notes generation

      - name: Download web artifact
        if: ${{ contains(github.ref, 'web') || contains(github.ref, 'demo') }}
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: artifacts/web

      - name: Download iOS artifact
        if: ${{ contains(github.ref, 'ios') }}
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: artifacts/ios

      - name: Download Android artifact
        if: ${{ contains(github.ref, 'android') }}
        uses: actions/download-artifact@v4
        with:
          name: android-build
          path: artifacts/android

      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          VERSION=$(echo "${{ github.ref_name }}" | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          # Create a zip of the web build if it exists
          if [[ "${{ contains(github.ref, 'web') || contains(github.ref, 'demo') }}" == "true" && -d "artifacts/web" ]]; then
            cd artifacts/web
            zip -r ../../release-artifacts/djibon-web-${VERSION}.zip .
            cd ../..
            echo "Prepared web artifact"
          fi

          # Copy iOS artifact if it exists
          if [[ "${{ contains(github.ref, 'ios') }}" == "true" && -f "artifacts/ios/djibon-ios.zip" ]]; then
            cp artifacts/ios/djibon-ios.zip release-artifacts/djibon-ios-${VERSION}.zip
            echo "Prepared iOS artifact"
          fi

          # Copy Android artifact if it exists
          if [[ "${{ contains(github.ref, 'android') }}" == "true" && -f "artifacts/android/djibon-app.apk" ]]; then
            cp artifacts/android/djibon-app.apk release-artifacts/djibon-android-${VERSION}.apk
            echo "Prepared Android artifact"
          fi

          # List all artifacts
          echo "Prepared artifacts for release:"
          ls -la release-artifacts/

      - name: Generate release status
        id: release-status
        run: |
          STATUS="## Build Status\n\n"

          if [[ "${{ needs.build-web.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ‚úÖ Web: Successfully deployed"
          elif [[ "${{ needs.build-web.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ‚è≠Ô∏è Web: Skipped"
          else
            STATUS="$STATUS\n- ‚ùå Web: Failed"
          fi

          if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ‚úÖ iOS: Successfully built"
          elif [[ "${{ needs.build-ios.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ‚è≠Ô∏è iOS: Skipped"
          else
            STATUS="$STATUS\n- ‚ùå iOS: Failed"
          fi

          if [[ "${{ needs.build-android.result }}" == "success" ]]; then
            STATUS="$STATUS\n- ‚úÖ Android: Successfully built"
          elif [[ "${{ needs.build-android.result }}" == "skipped" ]]; then
            STATUS="$STATUS\n- ‚è≠Ô∏è Android: Skipped"
          else
            STATUS="$STATUS\n- ‚ùå Android: Failed"
          fi

          echo "RELEASE_STATUS<<EOF" >> $GITHUB_ENV
          echo -e "$STATUS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download tag info
        uses: actions/download-artifact@v4
        with:
          name: tag-info
          path: ./

      - name: Extract version from tag
        id: extract-version
        run: |
          TAG=$(cat tag-info.txt)
          VERSION=$(echo $TAG | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.extract-version.outputs.version }}
          body: |
            ${{ env.RELEASE_NOTES }}

            ${{ env.RELEASE_STATUS }}

            ## Download Links

            - Web App: https://web.djibon.com
            - Download Page: https://download.djibon.com
          files: release-artifacts/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-download:
    needs: [build-ios, build-android, release-to-github]
    if: |
      always() &&
      (needs.build-ios.result == 'success' || needs.build-android.result == 'success') &&
      needs.release-to-github.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create download directory
        run: mkdir -p download-page

      - name: Download iOS artifact
        if: needs.build-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-build
          path: download-page

      - name: Download Android artifact
        if: needs.build-android.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-build
          path: download-page

      - name: List download directory contents
        run: ls -la download-page

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          workingDirectory: 'download-page'
          command: pages deploy . --project-name=djibon-download

name: Build iOS App and Deploy

on:
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version number (x.x.x)'
        required: true
        default: '0.0.1'
  push:
    tags:
      - 'v*ios*'  # Trigger on any tag containing 'ios'

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios, x86_64-apple-ios, aarch64-apple-ios-sim

      - name: Install Dioxus CLI
        run: cargo install dioxus-cli --locked

      - name: Extract version from tag or input
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract version from tag (e.g., v0.0.3-ios-web -> 0.0.3)
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=$(echo $TAG | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          else
            # Use the version from workflow_dispatch input
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Update version in Dioxus.toml and Cargo.toml
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          # Update only the package version in Cargo.toml (macOS sed syntax)
          sed -i '' -E '/^\[package\]/,/^\[/ s/^version = "[0-9]+\.[0-9]+\.[0-9]+"/version = "'"$VERSION"'"/' Cargo.toml
          # Update version_name in Dioxus.toml
          sed -i '' "s/version_name = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/version_name = \"$VERSION\"/g" Dioxus.toml

      - name: Build iOS App
        run: dx build --platform ios --release

      - name: Prepare iOS App Bundle
        run: |
          # Find the iOS app bundle
          IOS_APP_PATH=$(find target/dx/djibon/release/ios -name "*.app" -type d | head -1)

          if [ -z "$IOS_APP_PATH" ]; then
            echo "iOS app bundle not found"
            exit 1
          fi

          # Create a zip file of the app
          cd $(dirname "$IOS_APP_PATH")
          APP_NAME=$(basename "$IOS_APP_PATH" .app)
          zip -r "$APP_NAME.zip" "$(basename "$IOS_APP_PATH")"

          # Copy to download-page
          mkdir -p $GITHUB_WORKSPACE/download-page
          cp "$APP_NAME.zip" $GITHUB_WORKSPACE/download-page/djibon-ios.zip

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: ${{ github.workspace }}/download-page/djibon-ios.zip
          retention-days: 30

      # GitHub Release will be created by the release-and-deploy.yml workflow

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          workingDirectory: 'download-page'
          command: pages deploy . --project-name=djibon-download
